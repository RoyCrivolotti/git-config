[user]
    email = roycrivolotti@gmail.com
    name = Roy Crivolotti

[alias]
    co = checkout
    cob = checkout -b
    c = commit
    ce = ! git commit -m "Empty commit" --allow-empty
    a = add
    s = status
    d = diff
    getremote = ! git config --get remote.origin.url
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    listmerged = ! git branch --merged | grep -v -e master -e develop -e main
    cleanmerged = ! git branch --merged | grep -v -e master -e develop -e main | xargs git branch -d
    lsdiff = diff --name-status
    lsdiffbranch = "!f() { if [ -z \"$1\" ]; then echo \"Input which branch to compare against\"; else git diff --name-status \"$1\"; fi }; f"
    diffr = "!f() { currBranch=$(git branch --show-current); git diff origin/$currBranch; }; f"
    diffrf = "!f() { if [ -z \"$1\" ]; then echo \"Error: Missing file path.\"; else currBranch=$(git branch --show-current); git diff origin/$currBranch -- \"$1\"; fi; }; f"
    cmlocal = "!f() { \
        echo 'Fetching latest changes...'; \
        git fetch -p; \
        echo 'Listing all local branches and their upstream status...'; \
        git for-each-ref --format '%(refname) %(upstream:track)' refs/heads; \
        echo 'Checking for local branches with no remote...'; \
        for branch in $(git for-each-ref --format '%(refname:short) %(upstream:track)' refs/heads | awk '$2 == \"[gone]\" {print $1}'); do \
            echo \"Deleting local branch '$branch'...\"; \
            git branch -D $branch && echo \"Deleted local branch '$branch'\" || echo \"Failed to delete local branch '$branch'\"; \
        done; \
    }; f" ## Remove local branches with no remote
    log-remote-behind = "!f() { \
        echo 'Fetching latest changes...'; \
        git fetch -p; \
        echo 'Listing all remote branches:'; \
        git --no-pager branch -r; \
        for branch in $(git branch -r --no-merged main | grep -v -e \"origin/master\" -e \"origin/main\" -e \"origin/develop\" | sed 's/origin\\///'); do \
            behind=$(git rev-list --count origin/$branch..main); \
            ahead=$(git rev-list --count main..origin/$branch); \
            echo \"Branch '$branch' is $ahead commits ahead and $behind commits behind 'main'\"; \
            if [ $behind -gt 50 ]; then \
                echo \"Branch '$branch' would be deleted\"; \
            fi; \
        done \
    }; f" ## Log remote branches that are behind main by more than 50 commits
    cleanup-remote-behind = "!f() { \
        echo 'Fetching latest changes...'; \
        git fetch -p; \
        echo 'Listing all remote branches:'; \
        git --no-pager branch -r; \
        for branch in $(git branch -r --no-merged main | grep -v -e \"origin/master\" -e \"origin/main\" -e \"origin/develop\" | sed 's/origin\\///'); do \
            behind=$(git rev-list --count origin/$branch..main); \
            ahead=$(git rev-list --count main..origin/$branch); \
            echo \"Branch '$branch' is $ahead commits ahead and $behind commits behind 'main'\"; \
            if [ $behind -gt 50 ]; then \
                echo \"Deleting branch '$branch'...\"; \
                git push origin --delete $branch; \
                echo \"Deleted branch '$branch'\"; \
            fi; \
        done \
    }; f" ## Delete remote branches that are behind main by more than 50 commits with logging
    branch-info = "!f() { \
        green=$(tput setaf 2); \
        cyan=$(tput setaf 6); \
        reset=$(tput sgr0); \
        printf \"%b%-19s %-15s %-10s%b\\n\" \"$green\" \"Commit Date\" \"Relative Time\" \"Branch\" \"$reset\"; \
        for k in $(git branch | perl -pe 's/^..//'); do \
            commit_info=$(git show --pretty=format:\"%cd %cr\" --date=format:'%Y-%m-%d %H:%M:%S' $k -- | head -n 1); \
            commit_date=$(echo $commit_info | awk '{print $1, $2}'); \
            commit_time=$(echo $commit_info | awk '{print $3}'); \
            commit_relative=$(echo $commit_info | awk '{print $4, $5, $6}'); \
            printf \"%b%-19s  %b%-15s%b  %s%b\\n\" \"$green\" \"$commit_date $commit_time\" \"$cyan\" \"$commit_relative\" \"$reset\" \"$k\" \"$reset\"; \
        done | sort -r; \
    }; f" ## Display branch information with commit date and relative time
